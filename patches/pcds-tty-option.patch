diff --git a/asyn/drvAsynSerial/drvAsynSerialPort.c b/asyn/drvAsynSerial/drvAsynSerialPort.c
index 0b0caf5..4f683b5 100644
--- a/asyn/drvAsynSerial/drvAsynSerialPort.c
+++ b/asyn/drvAsynSerial/drvAsynSerialPort.c
@@ -1,3 +1,4 @@
+#define OPTION_TTYNAME
 /**********************************************************************
 * Asyn device support using local serial interface                    *
 **********************************************************************/       
@@ -496,6 +497,12 @@ setOption(void *drvPvt, asynUser *pasynUser, const char *key, const char *val)
         }
 #endif
     }
+#ifdef OPTION_TTYNAME
+    else if (epicsStrCaseCmp(key, "ttyname") == 0) {
+        assert(tty->fd < 0);
+        tty->serialDeviceName = epicsStrDup(val);
+    }
+#endif /* OPTION_TTYNAME */
 #ifdef ASYN_RS485_SUPPORTED
     else if (epicsStrCaseCmp(key, "rs485_enable") == 0) {
         if (epicsStrCaseCmp(val, "Y") == 0) {
@@ -835,6 +842,20 @@ static asynStatus readIt(void *drvPvt, asynUser *pasynUser,
     if (tty->fd < 0) {
         epicsSnprintf(pasynUser->errorMessage,pasynUser->errorMessageSize,
                                 "%s disconnected:", tty->serialDeviceName);
+#ifdef OPTION_TTYNAME
+        if (pasynUser->timeout > 0)
+            sleep(pasynUser->timeout);
+        else {
+            /*
+             * MCB - OK, this bears a little explanation: why are we
+             * sleeping if the user has requested no wait (0)?  The
+             * answer is that if we're disconnected, this will be called
+             * a *LOT*, so we are self-throttling here.  Yes, we should
+             * probably do this from where this is being called, but...
+             */
+            sleep(1);
+        }
+#endif /* OPTION_TTYNAME */
         return asynError;
     }
     if (maxchars <= 0) {
